'===========Set=========='
# Множества - изменяемый, неупорядоченный, итерируемый, неиндексируемый тип данных, предназначенный для хранения уникальных значений. 
# Множества могут хранить в себе только неизменяемые типы данных, если же в set использовать tuplе, то внутри tuplе не должно быть изменяемого типа данных

# set1 = {True, 0, 1, 5, 3, 4, 'hello', None, False}
# print(set1)

# set_2 = {1,2,3,'hello',1,[1,2]}
# print(set_2)

'==========FIFO / LIFO========'
# FIFO - first in first out
# LIFO - last in first out

# set_ = {1,2,3,4,2}
# print(set_)

# dict_ = {'a': 1, 'b':2, 'a':3}
# print(dict_)

'==============================Метода set========================'
# print(dir(set()))
'----------------------'
# pop - удаляет случайный элемент из set 
# set2 = {1,2,3}
# popped = set2.pop()
# print(popped)
# print(set2)
'----------------------'
# add - добавляет элемент в set
# set3 = {1,2,3}
# set3.add(3) 
# print(set3) # {1, 2, 3}
'----------------------'
# remove - удаляет элемент из set по значению
# set4 = {1,2,3}
# set4.remove(3)
# print(set4)
'----------------------'
# difference (-)
# set1 = {1,2,3}
# set2 = {3,4,5}
# print(set1 - set2) # {1,2}
# print(set2 - set1) # {4,5}
# print(set1.difference(set2)) # {1, 2}
# print(set2.difference(set1)) # {4, 5}

# set3 = {5, 6, 7}
# set4 = {6, 8, 9}
# print(set3 - set4) # {5, 7}
# print(set4 - set3) # {8, 9}
'----------------------'
# symmetric_difference
# set1 = {1,2,3}
# set2 = {3,4,5}
# print(set1.symmetric_difference(set2)) # {1, 2, 4, 5}
# print(set1)
'----------------------'
# intersection (&)
# set1 = {1,2,3,4}
# set2 = {3,4,5,6}
# print(set1.intersection(set2)) # {3, 4}
# print(set1 & set2) # {3, 4}
'----------------------'
# union - обьеденяет сеты
# set1 = {1,2,3,4}
# set2 = {4,5,6,7}
# print(set1.union(set2))
'----------------------'
# update 
# set1 = {1,2,3,4}
# set2 = {4,5,6,7}
# set1.update(set2)
# print(set1) # {1, 2, 3, 4, 5, 6, 7}


# адание 3Дан список name_of_list в котором хранится строка.
# Разрежьте ее на две равные части.
# Если длина строки нечетная, то длина первой части должна быть на один символ больше.
# Переставьте эти две части местами, при этом каждый символ должен являться отдельной строкой.
# Результат запишите в новый список new_list и выведите на экран.
# Например, если список выглядит так:
# ['Helloworld!']

# то, в результате получим:
# ['o', 'r', 'l', 'd', '!', 'H', 'e', 'l', 'l', 'o', 'w']

# используйте условное ветвление, функции len() и list()

# name_of_list = ['Helloworld!']  

# str_ = name_of_list[0] # получаем именно строку 'Helloworld!'
# index_middle_elem = len(str_) // 2 # получили индекс центрального символа

# if len(name_of_list[0]) % 2: # проверяем на четное или нечетное кол-во символов в строке
#     res = str_[index_middle_elem+1:] + str_[:index_middle_elem+1] # срезаем вторую часть слова и первую часть, далее соеденяем, 'orld!Hellow'
# else:
#     res = str_[index_middle_elem:] + str_[:index_middle_elem] # срезаем вторую часть слова и первую часть, далее соеденяем, 'orld!Hellow'
# new_list = list(res) # переводим 'orld!Hellow' --> ['o', 'r', 'l', 'd', '!', 'H', 'e', 'l', 'l', 'o', 'w']





# 6 / Создать список чисел nums.
# Используя цикл и метод списка, запишите все числа меньше 5 в новый список.
# Результат запишите в переменную res и выведите в терминал. nums выглядит так:
# nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# результат будет:

# res = [1, 1, 2, 3]

nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
res = []
for i in nums:
    if i < 5:
        res.append(i)
print(res)